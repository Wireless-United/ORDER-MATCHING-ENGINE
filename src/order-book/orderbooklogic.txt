// Order Book Template for Rust Order Matching Engine
// ---------------------------------------------------
// This module provides a template for representing an order book with two sides:
// 1. Bid book (buy orders, highest price on top)
// 2. Ask book (sell orders, lowest price on top)
//
// Key Concepts:
// - Each side maintains a sorted collection of price levels.
// - Each price level contains a queue of orders at that price.
// - Efficient insertion, removal, and lookup are required.

//
// Suggested Structures:
// - OrderBook: Main struct containing bid and ask books.
// - OrderSide: Enum for Bid/Ask.
// - PriceLevel: Struct for a price and its orders.
// - Order: Struct for individual order details.
//
// Traits and Methods to Consider:
// - add_order(order: Order)
// - remove_order(order_id: OrderId)
// - match_orders()
// - get_best_bid()/get_best_ask()
// - depth()/levels()
//
// Use Rust's BTreeMap or custom sorted structures for price levels.
// Use VecDeque for FIFO order queues at each price level.
//
// File structure suggestion:
// - mod.rs: Module entry point, re-exports
// - order_book.rs: Main OrderBook struct and logic
// - side.rs: OrderSide enum
// - price_level.rs: PriceLevel struct
// - order.rs: Order struct
//
// Implementations should focus on performance and correctness.
//have also consider scenarios when both trade has same time step nad same price 
//should consider using mutiple stratergies to prevent backlogging of trades 
//before entering the order book we have try Matching in the first instance to prevent stalling of trades 
// This is a template. Fill in with actual code as needed.
